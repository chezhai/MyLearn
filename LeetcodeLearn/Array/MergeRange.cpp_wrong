#include <iostream>
#include <vector>

using namespace std;

//該方法超出時間限制
class Solution /*{{{*/
{
public:
    void QuickSort(vector<vector<int> > &intervals, vector<int> &order, int left, int right)/*{{{*/
    {
        if (left >= right)
        {
            return;
        }

        int first = left;
        int last = right;
        int temp = intervals[order[left]][0];

        while (left < right)
        {
            while ((left<right) && (intervals[order[right]][0]>=temp))
            {
                --right;
            }
            
            while ((left<right) && (intervals[order[left]][0]<=temp))
            {
                ++left;
            }

            if (left < right)
            {
                swap(order[left], order[right]);
            }
        }

        if (left == first)
        {
            return;
        }

        swap(order[left], order[first]);
        QuickSort(intervals, order, first, left-1);
        QuickSort(intervals, order, left+1, right);
    }/*}}}*/

    vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        if (intervals.empty())
        {
            return vector<vector<int> >();
        }

        int size = intervals.size();
        if (size == 1)
        {
            return intervals;
        }

        vector<int> order(size, 0);
        for (int i=0; i<size; ++i)
        {
            order[i] = i;
        }
        QuickSort(intervals, order, 0, size-1);
        
        vector<vector<int> > ret;
        vector<int> temp(2,0);
        temp[0] = intervals[order[0]][0];
        temp[1] = intervals[order[0]][1]; 

        for (int i=1; i<size; ++i)
        {
            if (intervals[order[i]][0] <= temp[1])
            {
                if (intervals[order[i]][1] > temp[1])
                {
                    temp[1] = intervals[order[i]][1];
                }

                continue;
            }    

            ret.push_back(temp);
            temp[0] = intervals[order[i]][0];
            temp[1] = intervals[order[i]][1];
        }
        ret.push_back(temp);

        for (int i=0; i<ret.size(); ++i)
        {
            for (int j=0; j<ret[0].size(); ++j)
            {
                cout << ret[i][j] << ", ";
            }
            cout << endl;
        }

        return ret;
    }
};/*}}}*/

/*
 * class Solution [>{{{<]
 * {
 * public:
 *     vector<vector<int>> merge(vector<vector<int>>& intervals) 
 *     {
 * 
 *     }
 * }; [>}}}<]
 */

int main()
{
    vector<vector<int> > matrix = {{2,3},{5,5},{2,2},{3,4},{3,4}}; 
    //vector<vector<int> > matrix = {{1,4},{4,5}};

    class Solution a_class;
    
    a_class.merge(matrix);
    return 0;
}
